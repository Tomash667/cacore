//-----------------------------------------------------------------------------
// BitStream source
class BitStreamSource : public StreamSource
{
public:
	BitStreamSource(BitStream* bitstream, bool write);

	inline bool IsFile() const { return false; }
	bool Read(void* ptr, uint data_size);
	bool Skip(uint data_size);
	void Write(const void* ptr, uint data_size);

private:
	BitStream* bitstream;
	bool write;
};

//=================================================================================================
BitStreamSource::BitStreamSource(BitStream* bitstream, bool write) : bitstream(bitstream), write(write)
{
	assert(bitstream);
	size = bitstream->GetNumberOfBytesUsed();
	offset = (write ? bitstream->GetWriteOffset() : bitstream->GetReadOffset()) / 8;
	valid = true;
}


//=================================================================================================
bool BitStreamSource::Read(void* ptr, uint data_size)
{
	assert(ptr && !write);
	if(!Ensure(data_size))
		return false;
	bitstream->Read((char*)ptr, data_size);
	offset += data_size;
	return true;
}

//=================================================================================================
bool BitStreamSource::Skip(uint data_size)
{
	assert(!write);
	if(!Ensure(data_size))
		return false;
	offset += data_size;
	uint pos = offset * 8;
	if(write)
		bitstream->SetWriteOffset(pos);
	else
		bitstream->SetReadOffset(pos);
	return true;
}

//=================================================================================================
void BitStreamSource::Write(const void* ptr, uint data_size)
{
	assert(ptr && write);
	bitstream->Write((const char*)ptr, data_size);
	size += data_size;
	offset += data_size;
}

//=================================================================================================
StreamReader::StreamReader(BitStream& bitstream)
{
	source = StreamSourcePool::Get<BitStreamSource>(&bitstream, false);
	ok = source->IsValid();
}

//=================================================================================================
StreamWriter::StreamWriter(BitStream& bitstream)
{
	source = StreamSourcePool::Get<BitStreamSource>(&bitstream, true);
}
